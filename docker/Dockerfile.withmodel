# docker/Dockerfile.withmodel
# Build a Django API image with a model artifact baked in
FROM python:3.10-slim AS base

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

WORKDIR /app

# System packages (curl for HEALTHCHECK; build-essential helps some wheels compile if needed)
RUN apt-get update \
 && apt-get install -y --no-install-recommends build-essential curl \
 && rm -rf /var/lib/apt/lists/*

# Install Python deps early to leverage layer caching
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code (only what's needed to run the API)
COPY api/ ./api/
COPY configs/ ./configs/

# Create runtime dirs
RUN mkdir -p /logs /models

# ---- Bake the model artifact into the image ----
# Default expects a file at artifacts/model_pipeline.joblib (allowed by .dockerignore)
# Override at build-time: --build-arg MODEL_SRC=artifacts/HGB_pipeline_<runid>.joblib
ARG MODEL_SRC=artifacts/model_pipeline.joblib
COPY ${MODEL_SRC} /models/model_pipeline.joblib

# Environment defaults (can be overridden at runtime with -e ...)
ENV DJANGO_SETTINGS_MODULE=api.settings \
    MODEL_SOURCE=local \
    MODEL_PATH=/models/model_pipeline.joblib \
    PRED_LOG_DIR=/logs \
    PORT=8000

# Collect static files (WhiteNoise will serve them)
WORKDIR /app/api
RUN python manage.py collectstatic --noinput

# Back to app root for runtime
WORKDIR /app
EXPOSE 8000

# Healthcheck hits Django /health endpoint
HEALTHCHECK --interval=30s --timeout=3s --start-period=20s --retries=3 \
  CMD curl -fsS "http://127.0.0.1:${PORT}/health" || exit 1

# Gunicorn entrypoint
CMD ["gunicorn", "api.wsgi:application", "--bind", "0.0.0.0:8000", "--workers", "2"]
