name: Evidently Drift Monitoring

on:
  schedule:
    # 9:00 AM America/New_York â‰ˆ 13:00 UTC (GitHub Actions uses UTC)
    - cron: "0 13 * * *"
  workflow_dispatch: {}   # allow manual runs

jobs:
  monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install deps (minimal for monitoring)
        run: |
          python -m pip install --upgrade pip
          pip install evidently pandas numpy

      - name: Ensure output dir exists
        run: mkdir -p reports/monitoring

      - name: Run Evidently monitoring
        # Adjust paths if your script/file lives elsewhere
        run: |
          python -m scripts.monitor_evidently \
            --log-csv logs/predictions.csv \
            --out-dir reports/monitoring \
            --reference-is-recent

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: evidently-report
          path: |
            reports/monitoring/evidently_report.html
            reports/monitoring/evidently_report.json
          if-no-files-found: warn

      - name: Fail the job if drift detected
        run: |
          python - <<'PY'
          import json, sys, pathlib
          p = pathlib.Path("reports/monitoring/evidently_report.json")
          if not p.exists():
              print("No report found; skipping drift gate.")
              sys.exit(0)
          d = json.loads(p.read_text())
          # Find DataDriftPreset metric block
          dataset = None
          for m in d.get("metrics", []):
              if m.get("metric") == "DataDriftPreset":
                  dataset = m.get("result", {})
                  break
          drift = bool(dataset.get("dataset_drift", False)) if dataset else False
          n = int(dataset.get("number_of_drifted_columns", 0)) if dataset else 0
          print(f"DRIFT={drift}  DRIFTED_COLUMNS={n}")
          # Exit non-zero to fail the job if drift is detected
          sys.exit(1 if drift else 0)
          PY
